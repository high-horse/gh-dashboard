"""
Django settings for py_hub_backend project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os.path
from pathlib import Path
import environ
import logging
from logging.handlers import TimedRotatingFileHandler

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
env = environ.Env()
environ.Env.read_env(BASE_DIR / ".env")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-6x2973jard^e)%$_ysakn&j8gfew6zr8oj+j^tolvvhhglp91q'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',


    'accounts',


    'rest_framework',
    'rest_framework.authtoken' ,   
    'django_extensions',
    'corsheaders',
    "storages"
    
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',

    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


MIDDLEWARE_ = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',

    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
]
CORS_ALLOW_ALL_ORIGINS = False
CORS_ALLOW_CREDENTIALS = True

APPEND_SLASH = True


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASS': [
        'accounts.authentication.CookieTokenAuthentication'
    ],
    'EXCEPTION_HANDLER': 'accounts.authentication.custom_exception_handler'
}
ALLOWED_HOSTS = ['localhost', '127.0.0.1']

ROOT_URLCONF = 'py_hub_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'py_hub_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default' : {
        'ENGINE': env("ENGINE"),
        'NAME': env("NAME"),
        'USER': env("DB_USER"),
        'PASSWORD': env("PASSWORD"),
        'HOST': env("HOST"),
        'PORT': env("PORT"),
    },
    'default_old': {
        'ENGINE':'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
# AUTH_USER_MODEL = 'accounts.CustomUser'

# Logging the logs
LOG_FILE = env("DEBUG_FILE", default=BASE_DIR / "storage/logs/django.log")
LOG_FILE = str(LOG_FILE)
# Create the directory if missing
os.makedirs(os.path.dirname(LOG_FILE), exist_ok=True)

# Set Rotation logging
if env.bool("LOG_ROTATION", default=False):
    LOG_HANDLER_CLASS="logging.handlers.TimedRotatingFileHandler"
    LOG_HANDLER_PARAMS={
        "when": env("LOG_ROTATION_WHEN", default="midnight"),  # e.g. "midnight", "D", "H"
        "backupCount": env.int("LOG_BACKUP_COUNT", default=7),
        "encoding": "utf-8"
    }
else :
    LOG_HANDLER_CLASS = "logging.FileHandler"
    LOG_HANDLER_PARAMS = {
        "encoding": "utf-8",
    }

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose':{
            # 'format': '{levelname} {asctime} {module} {message}',
            'format': '{levelname} {asctime} [{name}] {message}',
            'style': '{',
        },
        'simple':{
            'format': '{levelname} {message}',
            'style': '{',
        }
    },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': LOG_HANDLER_CLASS,
            'filename':  LOG_FILE , # 'debug.log', #BASE_DIR / 'logs/debug.log',
            'formatter': 'verbose',
            **LOG_HANDLER_PARAMS
        },
        'console': {
            # 'level': 'DEBUG',
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            # 'level': 'DEBUG',
            'level': 'INFO',
            'propagate': True
        },
        'django.db.backends': {
            'handlers': ['file'],
            'level': 'WARNING',
            'propagate': False,
        },
        'accounts': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': False,
        }
    }
}


GITHUB_CLIENT_ID = env("GITHUB_CLIENT_ID")
GITHUB_CLIENT_SECRET = env("GITHUB_CLIENT_SECRET")
GITHUB_REDIRECT_URI = env("GITHUB_REDIRECT_URI")

# Local file storage
MEDIA_ROOT = BASE_DIR / "storage/media"
MEDIA_URL="/media/"

# minio storage
MINIO = {
    "ENDPOINT_URL": env("MINIO_ENDPOINT_URL", default="http://127.0.0.1:9000"),
    "ACCESS_KEY": env("MINIO_ACCESS_KEY", default="minioadmin"),
    "SECRET_KEY": env("MINIO_SECRET_KEY", default="minioadmin"),
    "BUCKET": env("MINIO_BUCKET", default="media"),
    "REGION": env("MINIO_REGION", default="us-east-1"),
    "SSL": env.bool("MINIO_SSL_MODE", default=False),
    "VERIFY": env.bool("MINIO_VERIFY", default=False),
}

# --Default backend--
DEFAULT_STORAGE = env("DEFAULT_STORAGE", default="minio")